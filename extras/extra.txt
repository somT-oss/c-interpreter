    HashTable *hashtable = create_hashtable();
    TokenType keyword = "let";
    TokenType var = "x";
    TokenType assign = "=";
    TokenType integer = "5";
    TokenType plus = "+";
    TokenType end_of_file = "";

    Token KEYWORD = {
        keyword,
        "let"
    };
    Token VAR = {
        var,
        "x"
    };
    Token ASSIGN = {
        assign,
        "="
    };
    Token INT = {
        integer,
        "5"
    };
    Token PLUS = {
        plus,
        "+"
    };
    Token END_OF_FILE = {
        integer,
        ""
    };

    Token token_list[] = {
        KEYWORD, VAR, ASSIGN, INT, PLUS, END_OF_FILE
    };

    for (int i = 0; i < 6; i++) {
        insert(hashtable, token_list[i].TokenType, token_list[i].literal);
    }

GOTTEN FROM main function during checking of token_types
---------------------------------------------------------------------------

    TokenType keyword_func = "function";
    TokenType keyword_let = "letter";

    Token func = {
        keyword_func, 
        "func"
    };

    Token let = {
        keyword_let,
        "let"
    };

    Token tokens[] = {func, let};
    int tokens_length = (int)(sizeof(tokens)/sizeof(tokens[0]));


----------------------------------------------------------------------------

        case '=':
            if (peekChar(lexer) == '=') {
                readChar(lexer);
                Token token = {
                    "EQUALS",
                    "=="
                }; 
            } else {
                token = newToken("ASSIGN", &lexer->character);
            }
        case '!':
            if (peekChar(lexer) == '=') {
                readChar(lexer);
                Token token = {
                    "NOT EQUALS",
                    "!="
                }; 
            } else {
                token = newToken("BANG", &lexer->character);
            }
            printf("%s, %s", token.type, token.literal);

-------------------------------------------------------------------------------
default:
            if (isLetter(lexer->character)) {
                token.literal = readIdentifier(lexer);
                if (search(KEYWORDS, token.literal) == 0) {
                    token.type = get_key(KEYWORDS, token.literal);
                } 
                else if (isdigit(lexer->character) == 0) {
                    token.type = "INT";
                    token.literal = readNumber(lexer); 
                }
            } else {
                token = newToken("EOF", &lexer->character);
            }

----------------------------------------------------------------------------------

    if (lexer->character == '=') {
        token = newToken("ASSIGN", &lexer->character);
    } else if (lexer->character == ';') {
        token = newToken("SEMICOLON", &lexer->character);
    } else if (lexer->character == '(') {
        token = newToken("LBRACE", &lexer->character);
    } else if (lexer->character == ')') {
        token = newToken("RBRACE", &lexer->character);
    } else if (lexer->character == '{') {
        token = newToken("RPAREN", &lexer->character);
    } else if (lexer->character == '}') {
        token = newToken("LPAREN", &lexer->character);
    } else {
        token = newToken("EOF", &lexer->character);
    }

-------------------------------------------------------------------------------------
PARSER nodes

typedef struct {
    Node node;
    Node statementNode;
} Statement;


typedef struct {
    Node node;
    Node expressionNode;
} Expression;


typedef struct {
    Statement *statements;
} Program;

typedef struct {

} Identifier;

typedef struct {
    Token token;
    Identifier name;
    char *expression;
} LetStatement;

char *getTokenLiteral(Program *program) {
    int program_statment_length = sizeof(program->&statements)/sizeof(program->statements[0]);
    if ()
}